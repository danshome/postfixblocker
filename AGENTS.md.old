<!-- Updated to best practices on 2025-09-14; appended generated agent docs while preserving maintainer instructions. -->
# AGENTS

This repository contains a Python service and Angular web UI for managing a
database backed email block list for postfix.  Both PostGRESQL, and IBM DB2 11.5
need to be supported.

## Development instructions

- Do not modify the AGENTS.md file unless you ask first and explain what you would like to add to it and why. 
- Always strive to improve the project and make it better and easier to use.
- Don't assume the project follows best practices. If you find that it's not, then explain to the user why it's not following best practices and offer to fix the project.
- Before making any changes, start Docker services.
- Run unit tests with `pytest` from the repository root.
- Run db backend tests using `tests/test_db_backends.py`
- Run the E2E tests using `tests/e2e_test.py`
- If any of the unit tests, backend tests, or E2E tests fail, fix the issues before proceeding.
- Follow standard PEP8 style for Python code.
- After making any changes, always re-run the unit tests, backend tests, and E2E tests, and fix any issues.
- Always update documentation if necessary. 
- Always update the CHANGELOG.md file with the date and time of the change.
- After making any changes, run the pre-commit hooks across the repo and fix all issues:
  - `python -m pip install -r requirements-dev.txt` (one-time)
  - Quick path to auto-fix, restage, and run hooks: `./scripts/precommit-fix.sh`
    - This runs Ruff format + fix and ESLint --fix first to minimize reruns, then executes all hooks.
  - Or run manually: `pre-commit run --all-files`
  - Ensure Ruff, Mypy, Bandit, and ESLint pass before committing.

## Codex AI agent – Frontend change checklist

Every time you make changes that affect the frontend, follow this exact sequence to ensure a clean state and passing tests:

1) Clean and reinstall

- `cd frontend`
- `rm -rf node_modules package-lock.json`  # optional but recommended after big changes
- `npm install`

2) Run unit tests

- `npm test`

3) Run e2e tests

- Ensure backend is up in another terminal: `docker compose up`
- `npm run e2e`

Do not skip these steps. If any step fails, fix the issues before proceeding. After applying fixes, repeat the checklist to verify.

<!-- BEGIN GENERATED: AGENTS:INVENTORY -->

## Automation & Agent Inventory (Supplemental)

This section documents the automation/agents used around the project to aid
maintainers and contributors. It does not change the development instructions
above.

| Name         | Role                    | Inputs              | Outputs             | Triggers            | Dependencies |
|--------------|-------------------------|---------------------|---------------------|---------------------|--------------|
| codex-cli    | Coding assistant (you)  | Repo + prompts      | Patches, suggestions| Manual (developer)  | Docker, pytest|

### Interface Contracts

```json
{
  "agent": "codex-cli",
  "input": {"task": "string", "context": "files+env"},
  "output": {"patches": ["git-diff"], "notes": "string"}
}
```

### Observability & Runbooks

- Logs: Console in the CLI session
- Metrics/Tracing: N/A
- Failure modes: Sandbox limits, network restrictions, missing dependencies
- Runbook: Re-run with adjusted permissions; consult `AGENTS.md` instructions

<!-- END GENERATED: AGENTS:INVENTORY -->
# Repository Guidelines

## Project Structure & Module Organization

- `postfix_blocker/` – Python service modules:
  - `blocker.py` (writes Postfix maps, reloads Postfix)
  - `api.py` (Flask API for managing addresses)
- `frontend/` – Angular 20 web UI (Material, Karma/Playwright).
- `docker/` – Postfix images and supervisor config.
- `tests/` – Pytest suites (`unit`, `backend`, `e2e`).
- `logs/` – Host‑mounted logs from containers (API and blocker).

## Build, Test, and Development Commands

- Start stacks: `docker compose up --build -d`
- Python tests: `pytest -q` (markers: `-m unit|backend|e2e`)
- Frontend unit tests: `cd frontend && npm install && npm test`
- Frontend e2e: `cd frontend && npm run e2e` (ensure Docker stack is up)
- Quick lint/fix + hooks: `./scripts/precommit-fix.sh` (then commit)

## Coding Style & Naming Conventions

- Python: PEP 8; format with Ruff (`ruff format`), lint with Ruff/Mypy/Bandit.
- TypeScript: ESLint (`@typescript-eslint`, `sonarjs`); Angular style guides.
- Naming: Python `snake_case` (modules, functions), `PascalCase` classes; TS `PascalCase` components, `camelCase` services/vars.

## Testing Guidelines

- Pytest test files: `tests/test_*.py`. Keep fast, deterministic unit tests.
- Backend/e2e tests require Docker services; skip gracefully if unavailable.
- Frontend: Karma (unit) and Playwright (e2e). Prefer small, focused specs.
- Run full suite before PR: `pytest -q && (cd frontend && npm test && npm run e2e)`.

## Commit & Pull Request Guidelines

- Commits: concise, imperative subject; include rationale in body when needed.
- Pre‑commit is required before committing: `pre-commit run --all-files` (or use `./scripts/precommit-fix.sh`).
- PRs must include:
  - What/why, screenshots/GIFs for UI changes
  - Passing tests (Python + frontend) and green pre‑commit
  - Any config/doc updates (README/INSTALL/CHANGELOG) when applicable

## Security & Configuration Tips

- Never commit secrets. Use env vars and Docker secrets.
- Logging controls:
  - API: `API_LOG_LEVEL`, `API_LOG_FILE` (rotating)
  - Blocker: `BLOCKER_LOG_LEVEL`, `BLOCKER_LOG_FILE` (rotating)
- Host logs are under `./logs/` via Docker volume.
