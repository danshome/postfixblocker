services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: blocker
      POSTGRES_PASSWORD: blocker
      POSTGRES_DB: blocker
    ports:
      - "5433:5432"
  mailhog:
    image: mailhog/mailhog
    platform: linux/amd64
    ports:
      - "8025:8025"
  postfix:
    build:
      context: .
      dockerfile: docker/postfix/Dockerfile
      args:
        ENABLE_DB2: "0"
    ports:
      - "1025:25"
      - "5001:5000"
    depends_on:
      - db
      - mailhog
    environment:
      BLOCKER_DB_URL: postgresql://blocker:blocker@db:5432/blocker
      API_LOG_FILE: /var/log/postfix-blocker/api.log
      BLOCKER_LOG_FILE: /var/log/postfix-blocker/blocker.log
      API_LOG_LEVEL: DEBUG
      BLOCKER_LOG_LEVEL: DEBUG
    volumes:
      - ./logs:/var/log/postfix-blocker
  postfix_db2:
    build:
      context: .
      dockerfile: docker/postfix/Dockerfile
      args:
        ENABLE_DB2: "1"
    platform: linux/amd64
    ports:
      - "1026:25"
      - "5002:5000"
    depends_on:
      - db2
      - mailhog
    environment:
      BLOCKER_DB_URL: ibm_db_sa://db2inst1:blockerpass@db2:50000/BLOCKER
      API_LOG_FILE: /var/log/postfix-blocker/api.log
      BLOCKER_LOG_FILE: /var/log/postfix-blocker/blocker.log
      API_LOG_LEVEL: DEBUG
      BLOCKER_LOG_LEVEL: DEBUG
    volumes:
      - ./logs:/var/log/postfix-blocker
  db2:
    image: ibmcom/db2:11.5.8.0
    platform: linux/amd64
    environment:
      LICENSE: accept
      DB2INST1_PASSWORD: blockerpass
      DBNAME: BLOCKER
      AUTOCONFIG: "false"
      TO_CREATE_SAMPLEDB: "false"
      REPODB: "false"
      ARCHIVE_LOGS: "false"
    privileged: true
    volumes:
      - db2data:/database
    ports:
      - "50000:50000"
    # To test with DB2, set postfix BLOCKER_DB_URL to for example:
    #   ibm_db_sa://db2inst1:blockerpass@db2:50000/BLOCKER
  # and ensure the Python image includes ibm-db and ibm-db-sa packages.
volumes:
  db2data:
  
